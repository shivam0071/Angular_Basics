Angular creates a single HTML website, THE DOM of this HTML gets modified by Javascript
hence the loading is faster...things are very responsive like a mobile app...that why we are using Angular

GET STARTED

1) Download and Install node which also installs npm (node package manager)
We need npm to install various node modules which we will be using in Angular app
you can think npm as pip of python

User: Wait wait wait...WTH is NODE?

    tldr; Node runs JS outside a browser and it is asynchronous by default
    Node.exe is basically a C++ program for running java script (js engine)

    Something about node -> https://nodejs.org/en/about/
    Node Architecture - https://www.youtube.com/watch?v=XUSHH0E-7zk (imp)
    Something about Asynchronous Programming -> https://eloquentjavascript.net/11_async.html
    Asynchronous Programming -> https://www.youtube.com/watch?v=jOupHNvDIq8&list=PLTjRvDozrdlydy3uUBWZlLUTNpJSGGCEm&index=3



2.) Install the Angular CLI -> https://cli.angular.io/
>>> npm install -g @angular/cli
The Angular CLI is a command-line interface tool that you use to initialize, develop, scaffold, and maintain Angular applications.
Details - > https://angular.io/cli
basically we use this to create, build and server projects
example - ng new my-dream-app

*** ng help (use this)
    ng generate --help


USER : OK MAN, enough of this....i have installed this node, npm and cli thing now tell me how to make websites?
Can't we just start already

TUTOR: Ok ok hold on to your horses, we will make a first app soon.
Lets make our first app using @angular/cli

FIRST APP
1.) First make a folder call - Intro_1 and cd to Intro_1

2.) Make a first app by running - ng new intro-app-1
    * Routing .. select - N
    * CSS -- Enter
DAMMMMMMMM -- The project creation failed
Project name "intro-app-1" is not valid. New project names must start with a letter, and must contain only alphanumeric characters or dashes. When adding a dash the segment after the dash must also start with a letter.
intro-app-1

Only dashes and alphabets are allowed...Okay then
lets run
    * ng new intro-app

USER: Mannnnnnn its taking forever to run, why is it so..what the heck is happening?
T: Its installing all the dependencies... Angular uses type script while browsercan only understand Java Script

Type Script is a superset of JS, Any line of JS code will also run in TS

1.) Strong Typing
    eg int i = 33 ( not neccessary but better use them)

2.) OOPS
3.) Compile Time Errors
4.) Great Tooling

TS ---------> Transpile -------------> JS


3.) Run the app
>>> ng serve
This converts all the TS to JS and runs our app

Congrats man...your first angular app is running.... CHEERS

https://blog.angular.io/
https://angular.io/tutorial -- A must visit tutorial, check out Intro_tute_by_angular_2











NEXT STEPS

User : Can you tell me how to make some cool websites right now?
T: Welllll.......lets see we still have a lots of basics to cover

so our simple steps were
ng new project-name - to create new project
ng serve - to run


Let move forward

Lets make some changes to the code and understand the basics
* Angular app consists of components...currently we only have a single component
.html
.css
.ts
app.module.ts - For importing [TS modules] and for letting Angular know about those modules

*  ... src/app
    Lets change something is app.component.ts file [Add ...TESTING TS]
    Looks like {{title}} such variables are defined in the .ts files
    Result - The changes are visible

* lets remove the whole HTML and add our tags , Result - Works
  Lets add something to Input
  We have some modules in angular called Directives written as 
  [()]
  Here we added ngModel...now we also has to import this in app.module.ts
  [(ngModel)]

    Import using
    import {FormsModule} from '@angular/forms'


HTML :- 
<input type = "text" [(ngModel)] = title>
<p>{{title}}</p>

User : DANG it worksss


Also you might see something called app-root in component.ts
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

Now you can also see this in index.html 

<body>
  <app-root></app-root>
</body>
</html>

So similarly you have define selectors in index.html to have your component running
Let remove this from index.html

Result -- The webpage is empty lol 



BOOTSTRAP -- LET us also ADD the bootstrap so we hae some basic CSS
>>> npm install --save bootstrap@3
This save this locally in node_modules folder

2.) Add this to angular.json as well
    "styles": [
              "src/styles.css"
            ],

Add here 
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],

Result :- It works...making a backup of this to use for different projects









##################################################################
We are done with the Basics.....this project is save elsewhere, We will be modifying this now
##################################################################

Lets go into everything in details

How does everything is triggered?

WE know that only index.html is running and the coponents are added but then how is it initiated 
and how to we see all the components?

<body>
  <app-root></app-root>
</body>

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

* main.ts trigers everything >> platformBrowserDynamic().bootstrapModule(AppModule)
Here we see some AppModule is being passed...what is it?
>>> import { AppModule } from './app/app.module'; <<- Imported at the top...it is our app.module.ts file

hmmmmmm so the structure so far is
main.ts >> app.module.ts


Now we also see  this   
declarations: [AppComponent],  bootstrap: [AppComponent] in app.moudle.ts file
which is the actual component 
import { AppComponent } from './app.component';




#######################################################
CREATING NEW COMPONENTS
#######################################################

New components selector will be added to the app.component.ts which is the root componentof our app


Use Case: Lets print some information of our Server (backend)

1.)  Lets create a folder called server in app folder
2.)  add files... server.component.ts etc

server.component.ts 
Make it a component by exporting component classes of Angular...We use export because
we are going to use this component elsewhere.....in short used by Angular

ADD :-
  export class ServerComponent{
    
  }

ADD Decorator:

import { Component } from '@angular/core'

@Component({
    selector: 'app-server',
    templateUrl: './server.component.html',
})
  export class ServerComponent{
    
  }

OBSERVE thee SYNTAX
We created a component here and added Component from core so that this can be used by Angular


Now we will add this to app.module.ts

An App module is a bundle of features of our app...we add the components here.
import { ServerComponent } from './server/server.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule, FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

We can see that AppModule class is also empty but a decorator is added (NgModule from core)
We can add newly created components in declarations.
bootstrap tells which components should be used as root

Soooo just import it and Add it there... :D
add - <app-server></app-server> to app.component.html
Result - Everything Works :D


NOW for fun...only for fun....lets add another component...and nest it inside server

We can create a new component automatically also by running..
* ng generate component <name> OR ng g c <name>

Let do it
ng g c servers

just add 
<h2>Component SERVERS NESTED</h2>
<app-server></app-server>
<app-server></app-server>
to new html file and this component to root component

We see the below nest

<app-servers >Component SERVERS NESTED</h2>
  <app-server>
    <div class="jumbotron text-center"><h1>Server Component Added</h1></div>
  </app-server>
  <app-server>
    <div class="jumbotron text-center"><h1>Server Component Added</h1></div>
  </app-server>
</app-servers>



########################################################################
Lets play with Templates HTML etc
########################################################################

We can write inline html
that means we can write html in ts...wait what

yeah...just instead of using templateUrl in @Component()
user template: and start writing HTML.... `use these for multiline`


What about CSS?
We are already using bootstrap but
lets add some color


We can also define the styles in .ts file by 
styles : [`
h3:{color: red;}`
]


Lets add 2 more components named WarningAlert and SuccessAlert for practice 

* Create folder
* Add files
* add to module.ts

RESULT : SUCCESS


We can also add selectors (app-root) etc using
1.) Attributes [app-root] and use it in html as <div app-root></div>
2.) Class .app-root and use it in html as <div class= app-root></div>



###########################################################################

DATA BINDING  === communication...that is..between type script code and HTML

###########################################################################

1.) String Interpolation -- {{}} -- normal variables and from method
2.) Property Binding [property] = "data"

React  to user events -- HTML to TS to HTML

1.) Event binding (event) = "expression"

2. Property Binding
 Such as - <button class = "btn btn-primary" [disabled]="userName === ''" (click)="onResetUserName()">Reset Username</button>

lets make changes server ts...

Property Binding....weird syntax
allowNewServer = false;
  constructor() { 
    setTimeout(() => {
      this.allowNewServer = true},2000);
  }

Eventbinding 
syntax ->(click)="onCreateServer()"

Another one
(input) = "onUpdateServerName($event)"
here $event is a variable that give is some information about the event
like clicking typing etc

basically in this event we have something called target where we have the typed text value
we fetch it using the below syntax
use it like this - this.serverName = (<HTMLInputElement>event.target).value;


Now the above thing that we did can be done easily by using
TWO WAY BINDING:-
It is done using FormsModule from @angular/forms using ngModel "directive"
Import this is app.modules.ts

[()] 
2 way data binnding..the front end accepts the value given i backend when no event is triggered

<input 
type="text" 
[(ngModel)] = "serverName"
>


#################################################################################
DIRECTIVES -- Instructions in the DOM
#################################################################################

WE can write our own directives using @Directives decorator and there are a lot of
inbuilt directives

* they are used as attributes of a HTML tag
<p *ngIf>
<p *ngIf="serverCreated">Server was created, Server name is {{serverName}}</p>
* indicates that this is a structural directive as it changes the structure of the DOM

lets also add else to this..here is the syntax
<p *ngIf="serverCreated; else noServer">Server was created, Server name is {{serverName}}</p>
<ng-template #noServer>
    <p>
        No Server was created
    </p>
</ng-template>

2.)Attribute Directives - They only change the elements they are placed on
ngStyle
<p [ngStyle] ="{backgroundColor: getColor()}">The server with ID {{ serverId}} is {{getServerStatus()}}</p>

3.) ngClass
<p [ngStyle] ="{backgroundColor: getColor()}"
[ngClass]="{online: serverStatus === 'online'}">
The server with ID {{ serverId}} is {{getServerStatus()}}
</p>

EXAMPLE - 
<button class = "btn btn-primary" (click)="onSecret()">{{toggleMe}}</button>
<p *ngIf="secret">{{theSecret}}</p>
<p *ngFor="let number of clickLog; let i=index" 
[ngStyle] ="{backgroundColor:number >= 5 ? 'blue': 'white'}"
[ngClass]= "{'white-text': number >= 5}">
{{i}} ---- > {{number}}</p>